%YAML 1.2
---

name: PowerShell
file_extensions: [ps1, psm1, psd1]
scope: source.powershell

contexts:
  main:
    - match: \b(if|else|for|while)\b
      scope: keyword.control.powershell
    - match: "<#"
      scope: start.definition.comment.block.powershell
      push: comment-block
    - match: \{
      scope: start.definition.script-block.powershell
      push: script-block
    - include: logical-operators
    - include: variables
    - include: strings

  comment-block:
    - meta_scope: comment.block.powershell
    - match: "#>"
      scope: end.definition.comment.block.powershell
      pop: true 
    - match: (?i)^\s*(\.)(synopsis|description|example|inputs|outputs|notes|link|component|functionality)
      scope: embedded.documentation.title.powershell
      captures:
        1: keyword.embedded.documentation.title.start.powershell
        2: constant.numeric.embedded.documentation.title.name.powershell
    - match: (?i)^\s*(\.)(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\s+([a-z0-9-_]+)
      scope: embedded.documentation.title.powershell
      captures:
        1: keyword.embedded.documentation.title.start.powershell
        2: constant.numeric.embedded.documentation.title.name.powershell
        3: keyword.embedded.documentation.title.argument.powershell

  script-block:
    - include: main
    - meta_scope: script-block.powershell
    - match: \}
      scope: end.definition.script-block.powershell
      pop: true 

  variables:
    - match: (?i)(\$)\b(true|false)\b
      scope: variable.powershell
      captures:
        1: keyword.start.variable.name.powershell
        2: constant.numeric.variable.name.powershell
    - match: (?i)(\$)(?:(script|global):)?([\w_]+)
      scope: variable.powershell
      captures:
        1: keyword.start.variable.name.powershell
        2: support.function.variable.scope.powershell
        3: variable.name.powershell
    - match: \$\{ 
      scope: keyword.start.variable.name.powershell
      push: variable-name-long

  variable-name-long:
    - meta_scope: variable.powershell
    - match: "(?i)(script|global):"
      captures:
        1: support.function.variable.scope.powershell
    - match: "[^}]+"
      scope: variable.name.powershell
    - match: \}
      scope: keyword.end.variable.name.powershell
      pop: true 

  strings:
    # - match: "@'"
    #   push: string-heredoc-single-quoted
    # - match: '@"'
    #   push: string-heredoc-double-quoted
    - match: '"'
      push: string-double-quoted
    # - match: "'"
      # push: string-single-quoted

  string-double-quoted:
    - meta_scope: string.quoted.double.powershell
    - match: '"'
      pop: true
    - include: string-interpolation
    - include: variables
    - include: string-double-quoted-escape-sequences

  # string-single-quoted:
  #   - meta_scope: string.quoted.single.powershell
  #   - include: variables
  #   - match: "`."
  #   - match: "'"
  #     pop: true

  # string-heredoc-single-quoted:
  #   - meta_scope: string.heredoc.single.quoted.powershell
  #   - include: variables
  #   - match: "`."
  #   - match: "'@"
  #     pop: true

  # string-heredoc-double-quoted:
  #   - meta_scope: string.heredoc.double.quoted.powershell
  #   - include: variables
  #   - match: "`."
  #   - match: '"@'
  #     pop: true

  string-double-quoted-escape-sequences:
    - match: "`[0abnfrvt\"'$`]"
      scope: constant.character.escape.powershell

  string-interpolation:
    - match: \$\(
      scope: keyword.start.interpolated.subexpression.powershell
      push: string-interpolation-subexpression

  string-interpolation-subexpression:
    - meta_scope: string.interpolated.content.powershell
    - include: main
    - match: \)
      scope: keyword.end.interpolated.subexpression.powershell
      pop: true

  logical-operators:
    - match: (?<!\w)-([ci]?[lg][te]|eq|ne)
      scope: keyword.operator.logical.powershell